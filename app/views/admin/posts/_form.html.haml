=simple_form_for(@post, url: [:admin, @post]) do |f|
  -# pluck gives you and array of arrays, which is the format that simple_form expects
  = f.input :category_id, collection: Category.pluck(:name, :id)

  .fields
    = f.input_field :featured, boolean_style: :inline
    = f.label :featured
    -# Manually, you'd do it like this:
    -# %input{name: 'posts[featured]', value: '0', type: 'hidden'}
    -# %input{id: 'posts_featured', name: 'posts[featured]', value: '1', type: 'checkbox', checked: @post.featured?}
    -# %label{for: 'posts_featured'} Featured?

  .fields
    = f.input_field :published, boolean_style: :inline
    = f.label :published

  - if @post.image.present?
    = image_tag @post.image.url(:thumb)

  .file-field.input-field
    .btn
      %span Image
      = f.input_field :image
    .file-path-wrapper
      %input.file-path.validate{type: :text}


  = f.input :title
  = f.input :summary
  = f.input :content

  -# new_admin_post_post_image_url needs brackets after because we have to tell it
  -# which post we're creating a post_image for
  -# persisted? asks if the post is already in the db
  - if @post.persisted?
    = link_to 'New Image', new_admin_post_post_image_url(@post)
  %ul
    - @post.post_images.each do |post_image|
      %li
        = image_tag post_image.image.url(:thumb)
        %p= post_image.image.url(:large)
        %p= post_image.image.url(:medium)
        %p= post_image.image.url(:small)

  =f.submit(class: 'btn waves-effect waves-light')
  = link_to('Cancel', admin_posts_url, class: 'btn waves-effect waves-light')
